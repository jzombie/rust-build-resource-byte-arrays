use bytes::Bytes;
use std::fs::File;
use std::io::{self, BufRead, BufReader, Write};
use std::path::Path;

/// Writes byte arrays to a Rust file as `pub static` constants.
///
/// # Arguments
/// * `output_path` - The path where the generated Rust file will be written.
/// * `byte_arrays` - A list of tuples (name, content) where:
///     - `name` is the name of the `pub static` variable.
///     - `content` is a `Bytes` object containing the byte data.
///
/// # Example
/// ```
/// use build_resource_byte_arrays::write_byte_arrays;
/// use bytes::Bytes;
///
/// write_byte_arrays(
///     "output.rs",
///     vec![("ARRAY_NAME", Bytes::from(vec![1, 2, 3]))],
/// ).unwrap();
/// ```
pub fn write_byte_arrays<P: AsRef<Path>>(
    output_path: P,
    byte_arrays: Vec<(&str, Bytes)>,
) -> io::Result<()> {
    let path = output_path.as_ref();

    // Create or truncate the file
    let mut file = File::create(path)?;

    // Write a header
    writeln!(
        file,
        "// Automatically generated file. Do not edit.\n// Generated by build-resource-byte-arrays crate.\n"
    )?;

    // Write the byte arrays as `pub static`
    for (name, content) in byte_arrays {
        writeln!(file, "pub static {name}: &[u8] = &{:?};", content.as_ref())?;
    }

    Ok(())
}

/// Clears all `pub static` byte arrays in the specified Rust file.
///
/// # Arguments
/// * `output_path` - The path to the generated Rust file.
///
/// # Example
/// ```
/// use build_resource_byte_arrays::clear_byte_arrays;
/// clear_byte_arrays("output.rs").unwrap();
/// ```
pub fn clear_byte_arrays<P: AsRef<Path>>(output_path: P) -> io::Result<()> {
    let path = output_path.as_ref();

    // Read the file and collect the lines
    let file = File::open(path)?;
    let reader = BufReader::new(file);
    let mut lines: Vec<String> = reader.lines().collect::<Result<_, _>>()?;

    // Look for `pub static` definitions and replace their contents with `&[]`
    for line in lines.iter_mut() {
        if line.trim_start().starts_with("pub static") {
            if let Some(eq_pos) = line.find('=') {
                // Replace everything after the '=' with `&[];`
                *line = format!("{} = &[];", &line[..eq_pos].trim_end());
            }
        }
    }

    // Write the updated lines back to the file
    let mut file = File::create(path)?;
    for line in lines {
        writeln!(file, "{}", line)?;
    }

    Ok(())
}
